#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import fontforge
import os
from datetime import datetime

def create_square_cjk_font(output_path):
    # 创建新字体
    font = fontforge.font()
    
    # 设置字体基本信息
    fontname = "SquareCJK"
    font.fontname = fontname
    font.familyname = fontname
    font.fullname = fontname
    font.copyright = "Generated by FontForge on " + datetime.now().strftime("%Y-%m-%d")
    font.version = "1.0"
    
    # 设置字体度量
    em_size = 1000  # 字体em大小
    font.em = em_size
    font.ascent = em_size * 0.8
    font.descent = em_size * 0.2
    
    # 设置所有字符为等宽正方形
    font.is_quadratic_width = True
    font.upos = -100  # 下划线位置
    font.uwidth = 50  # 下划线宽度
    
    # 定义CJK Unicode范围
    cjk_ranges = [
        (0x4E00, 0x9FFF),   # CJK统一表意文字
        (0x3400, 0x4DBF),   # CJK扩展A
        (0x20000, 0x2A6DF), # CJK扩展B
        (0x2A700, 0x2B73F), # CJK扩展C
        (0x2B740, 0x2B81F), # CJK扩展D
        (0x2B820, 0x2CEAF), # CJK扩展E
        (0x2CEB0, 0x2EBEF), # CJK扩展F
        (0x3000, 0x303F),   # CJK符号和标点
        (0x3300, 0x33FF),   # CJK兼容
        (0xF900, 0xFAFF),   # CJK兼容表意文字
        (0xFE30, 0xFE4F),   # CJK兼容形式
        (0xFF00, 0xFFEF)    # 半角及全角形式
    ]
    
    # 创建所有CJK字符
    square_size = em_size * 0.9  # 正方形大小
    padding = (em_size - square_size) / 2
    
    for start, end in cjk_ranges:
        for codepoint in range(start, end + 1):
            try:
                # 创建字符
                char = font.createChar(codepoint)
                
                # 设置字符宽度
                char.width = em_size
                
                # 创建正方形
                pen = char.glyphPen()
                pen.moveTo((padding, padding))
                pen.lineTo((padding + square_size, padding))
                pen.lineTo((padding + square_size, padding + square_size))
                pen.lineTo((padding, padding + square_size))
                pen.closePath()
                
                # 添加Unicode名称
                char.unicode = codepoint
                char.glyphname = "uni%04X" % codepoint
                
            except Exception as e:
                print(f"Error creating character U+{codepoint:04X}: {str(e)}")
                continue
    
    # 生成字体文件
    if not output_path.endswith(('.ttf', '.otf')):
        output_path += '.ttf'
    
    font.generate(output_path)
    print(f"Font generated successfully at: {os.path.abspath(output_path)}")

if __name__ == "__main__":
    import argparse
    
    parser = argparse.ArgumentParser(description='Generate a square CJK font')
    parser.add_argument('output', help='Output font file path (.ttf or .otf)')
    args = parser.parse_args()
    
    try:
        create_square_cjk_font(args.output)
    except Exception as e:
        print(f"Error generating font: {str(e)}")
